TODO
====
- *How do I adjust so that I don't have to do the verification step each time? 

- Handle character encoding? 
	- Assume that file contents are well formed? 

- When do I need to use the os.path.expanduser (http://effbot.org/librarybook/os-path.htm)

- Create a folder for the Google Drive shoebox app when first initialized

- Problems when uploading over file types in Google Drive (ex pdf). 
	- Probably have to change from text/plain to some other type

- shoebox> design a shoebox shell 
	- ls
	- cd
	- mkdir
	- rm 
	- mv 
	- help 
	- search? 
- Probably need to login to the shoebox shell right? 

- Installation script
	- Ask if pip is already installed
	- pip install dropbox 
	- pip install --upgrade google-api-python-client (do you need this?)
		- or is it already a dependency?
	- pip install pydrive 
	- Create a project directory in google drive
	- Use the Dropbox client id and secret to authorize the app and get the 
		access code. Store this access code somewhere? 
	- Save Google Drive credentials in config. 
	- Google Drive client_secrets.json needs to be stored somewhere
	- Make sure the settings are configured

- When uploading to Google Drive, make sure that the root directory is the shoebox app directory. 

- Obfuscate the file/folder names as well 

- Encrypt the file with access codes?

- Reauthenticating/Refreshing access token for Dropbox

- In the README, make a final directory tree so that the user knows where the files (esp config files) should be 
bin/
    dir.py
    main.py
    usr/
        user.py

- UPLOADS folder in shoebox root dir of Dropbox and Drive? 

- Clean up imports at the beginning of scripts

Meeting
- Cryptographic hash/check sum
- Which problems do we solve/which don’t we solve
	- Access to Dropbox/Drive - password protected. 
	Definitely don’t want them sitting in the clear in your directory
	- Obscurity - don’t know what files are on his Drive
		- usability for the user
	- Back out of commands 
		- Both need to succeed or neither of them
	- Decrypt to ramdisk
		- Volatile - it disappears. 
		- Don’t really want to save to disk
		- no backup file 



ESSAY

One of the challenges encountered when designing the download command of Shoebox was where to store the decrypted files. If the key and ciphertext are combined and stored as a local file on disk, then the file is just as vulnerable as before the protocol is used. An attacker with access to the user’s computer would be able to see the contents of the file in plaintext. An early solution to this problem was to create an encrypted disk image (Mac OS only). When a file is downloaded and decrypted from Shoebox, the disk image is mounted and the file is written. The disk image is unmounted once all actions have completed. [The disk image is protected using the same master password as the Shoebox client.] 

Although the Dropbox and Google Drive classes mostly contained the same functions, the differences in the APIs were clear. Using the Dropbox API was simple. Clear and comprehensive documentation was easy to find, and the Dropbox client library contained running code samples that covered many of the common core API calls. On the other hand, the Google Drive had minimal code samples, much of which only covered authentication. Documentation was also much less clear, and often times didn’t help even after finding the right page. Shoebox only supports Dropbox and Google Drive, but extending the project to other cloud service platforms would be as easy/difficult as the core API allows. 

Shoebox has four commands - upload, download, show, and shell. The upload command 







